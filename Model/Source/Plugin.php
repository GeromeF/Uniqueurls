<?php

namespace Netgasoline\Uniqueurls\Model\Source;

use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;


class Plugin extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb {
	
	   public function __construct(
		\Magento\Catalog\Model\ResourceModel\Product $productResource,
		\Magento\Store\Model\StoreManagerInterface $storeManager,
		\Magento\Framework\Model\ResourceModel\Db\Context $context,
		$connectionName = null
            ) {

			$this->_productResource = $productResource;
			$this->_storeManager = $storeManager;
			parent::__construct($context, $connectionName);

        }

		    protected function _construct()
    {
         $this->_init('Magento\Catalog\Model\Product', 'Magento\Catalog\Model\ResourceModel\Product');
    }
	
	    public function afterGetLoadedProductCollection(\Magento\Catalog\Block\Product\ListProduct $subject, $result)
    {
        return $this->RebuildUrls($result);
    }

		public function afterGetItemCollection(\Magento\Catalog\Block\Product\ProductList\Upsell $subject, $result)
    {
	 return $this->RebuildUrls($result);
    }
	
		public function afterCreateCollection(\Magento\CatalogWidget\Block\Product\ProductsList $subject, $result)
    { 
	 return $this->RebuildUrls($result);
    }


    public function afterGetCollection(\Magento\Sitemap\Model\ResourceModel\Catalog\Product $subject, $result)
    {
		$this->UrlCatAttributeId = $this->_productResource->getAttribute('ng_unique_url_category_id')->getId();
		$productIds = [];
		  foreach($result as $key=>$item) {
		  $productIds[] = $item->getEntityId();
              $SiteMapStoreId = $item->getStoreId();
		  } 
		  
		if (!$productIds) {
            return $result;
        }
		
		$select = $this->getConnection()
            ->select()
            ->from(['u' => $this->getTable('url_rewrite')], ['u.entity_id', 'u.request_path'])
            ->where('u.store_id = ?', $SiteMapStoreId)
            ->where('u.is_autogenerated = 1')
            ->where('u.entity_type = ?', ProductUrlRewriteGenerator::ENTITY_TYPE)
            ->where('u.entity_id IN(?)', $productIds);
            $select->joinInner(
                ['cu' => $this->getTable('catalog_product_entity_int')],
                'u.entity_id=cu.entity_id'
            )->where('cu.attribute_id = ?', $this->UrlCatAttributeId);
            $select->joinInner(
                ['cr' => $this->getTable('catalog_url_rewrite_product_category')],
                'cu.value=cr.category_id'
            )->where('cr.url_rewrite_id = u.url_rewrite_id');
		
        $urlRewrites = [];
	        foreach ($this->getConnection()->fetchAll($select) as $row) {
            if (!isset($urlRewrites[$row['entity_id']])) {
                $urlRewrites[$row['entity_id']] = $row['request_path'];
            }
        }
		
	        foreach ($result as $item) {
            if (isset($urlRewrites[$item->getEntityId()])) {
                $item->setData('url', $urlRewrites[$item->getEntityId()]);
            }
        }
		
	 return $result;
    }
	
	
	
	
		public function RebuildUrls($result)
    {
		$this->UrlCatAttributeId = $this->_productResource->getAttribute('ng_unique_url_category_id')->getId();
		$productIds = [];

	  foreach($result->getItems() as $key=>$item) {
		  $productIds[] = $item->getEntityId();
		  }

	  if (!$productIds) {
            return $result;
        }

	$select = $this->getConnection()
            ->select()
            ->from(['u' => $this->getTable('url_rewrite')], ['u.entity_id', 'u.request_path'])
            ->where('u.store_id = ?', $this->_storeManager->getStore()->getId())
            ->where('u.is_autogenerated = 1')
            ->where('u.entity_type = ?', ProductUrlRewriteGenerator::ENTITY_TYPE)
            ->where('u.entity_id IN(?)', $productIds);
            $select->joinInner(
                ['cu' => $this->getTable('catalog_product_entity_int')],
                'u.entity_id=cu.entity_id'
            )->where('cu.attribute_id = ?', $this->UrlCatAttributeId);
            $select->joinInner(
                ['cr' => $this->getTable('catalog_url_rewrite_product_category')],
                'cu.value=cr.category_id'
            )->where('cr.url_rewrite_id = u.url_rewrite_id');

        $urlRewrites = [];
	        foreach ($this->getConnection()->fetchAll($select) as $row) {
            if (!isset($urlRewrites[$row['entity_id']])) {
                $urlRewrites[$row['entity_id']] = $row['request_path'];
            }
        }

	        foreach ($result->getItems() as $item) {
            if (isset($urlRewrites[$item->getEntityId()])) {
                $item->setData('request_path', $urlRewrites[$item->getEntityId()]);
            } else {
                $item->setData('request_path', false);
            }
        }


	 return $result;       
    }
	
	

}
